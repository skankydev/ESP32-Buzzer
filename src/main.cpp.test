
#include "setting.h"
#include "MainApp.h"
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

// See the following for generating UUIDs:
// https://www.uuidgenerator.net/

#define SERVICE_UUID        "110a4526-2552-11ec-9621-0242ac130002"
#define CHARACTERISTIC_UUID "243b1e7c-2552-11ec-9621-0242ac130002"

BLECharacteristic *pCharacteristic;
BLEServer *pServer;
BLEService *pService;

int battery = 35;


void setup() {
	Serial.begin(115200);
	Serial.println("Starting BLE work!");

	BLEDevice::init("Beerover");
	pServer = BLEDevice::createServer();
	pService = pServer->createService(SERVICE_UUID);
	pCharacteristic = pService->createCharacteristic(
		CHARACTERISTIC_UUID, BLECharacteristic::PROPERTY_READ |BLECharacteristic::PROPERTY_WRITE
	);

	pCharacteristic->setValue("Hello World says Neil");
	pService->start();
	// BLEAdvertising *pAdvertising = pServer->getAdvertising();  // this still is working for backward compatibility
	BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
	pAdvertising->addServiceUUID(SERVICE_UUID);
	pAdvertising->setScanResponse(true);
	pAdvertising->setMinPreferred(0x06);  // functions that help with iPhone connections issue
	pAdvertising->setMinPreferred(0x12);
	BLEDevice::startAdvertising();
	Serial.println("Characteristic defined! Now you can read it in your phone!");
}

void loop() {
	// put your main code here, to run repeatedly:
	// pCharacteristic->setValue("je suis le buzzer");
	// delay(2000);

	uint16_t v = analogRead(battery);
	float battery_voltage = ((float)v / 4095.0) * 2.0 * 3.3 * (1100 / 1000.0);
	String text = "Battery Voltage is " + String(battery_voltage) + "V";
	Serial.println("DEBUG: Value: " + String(v) + " ,Battery Voltage is " + String(battery_voltage) + "V");
	//bleuSerial->println("DEBUG: Value: " + String(v) + " ,Battery Voltage is " + String(battery_voltage) + "V");
	//pCharacteristic->setValue(text);
	delay(5000);

}